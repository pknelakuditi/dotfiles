#!/usr/bin/env bash

# `.functions` provides helper functions for shell.
#
# This file is used as a part of `.shell_env`


# === Commonly used functions ===

pyclean () {
  # Cleans py[cod] and __pychache__ dirs in the current tree:
  find . | grep -E "(__pycache__|\.py[cod]$)" | xargs rm -rf
}


# creates a clean feature branch, updates dev, pull latest dev and delete legacy branches
# usage : gitClean
# usage : gitClean newBranchName
gitClean() {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        git fetch origin;
        if [[ $(git status --porcelain) ]]; then
               echo "[ERROR] Local changes exist in the current branch. Cannot proceed. $(pwd)"
        else
            git checkout dev;
            git pull origin dev;
            git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d > /dev/null 2>&1 || true;#delete legacy branches
            if [[ ! -z "${1}" ]]; then
                git checkout -b ${1};
            fi
        fi
    else
        echo "$(pwd) is not git repository."
    fi
}


transfer () {
  # Transfers text file as sharable link.
  # See https://transfer.sh/
  if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile;
}


mc () {
  # Create a new directory and enter it
  mkdir -p "$@" && cd "$@"
}


cdf () {
  # cd into whatever is the forefront Finder window.
  local path=$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')
  echo "$path"
  cd "$path"
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {
  # Shows pretty `man` page.
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

loadenv() {
  while read line; do
    if [ "${line:0:1}" = '#' ]; then
      continue
    fi
    export $line > /dev/null
  done < "$1"
  echo 'Loaded!'
}
